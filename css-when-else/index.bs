<pre class='metadata'>
Title: CSS When/Else Rules
Shortname: css-when-else
Level: 1
Status: DREAM
URL: https://tabatkins.github.io/specs/css-when-else/
Editor: Tab Atkins-Bittner
Abstract: A proposal to extend the concept of CSS conditional rules to arbitrary when/else chains, and supporing this, a proposal to unify the disparate conditional rules into a single grammar.
Ignored Terms: <boolean-condition>
</pre>

<pre class="link-defaults">
spec: css-conditional-3
	type: dfn; text: conditional group rule
</pre>

Introduction {#intro}
=====================

Writing complex media queries or supports queries is difficult,
particularly when you want to do Thing A in one circumstance,
Thing B in another circumstance,
and Thing C otherwise.
This requires carefully crafting your conditional rules to exclude anything matching the other rules,
while also making sure you're not accidentally over-excluding things and leaving some situations unmatched.

This spec proposes two things to fix this problem.
First, it proposes an ''@when'' rule,
which generalizes the concept of a conditional rule.
Anything you can express in an existing conditional rule
can be expressed in ''@when'',
it just has to be wrapped in an appropriate function
to declare what kind of condition it is.
This allow authors to easily combine multiple types of queries,
such as media queries and supports queries,
in a single boolean expression.
Without this,
authors must rely on nesting separate conditional rules,
which is harder to read and write,
presupposes the conditions are to be conjoined with the "and" boolean relation
(with no easy way to indicate anything else),
and restricts their utility in the proposed <a>conditional rule chains</a>.

Second, it proposes the introduction of ''@else'' rules,
which follow conditional rules
and automatically qualify their conditions as you'd expect,
such that at most one rule in an <a>conditional rule chain</a> is chosen as active.

Generalized Conditional Rules: the ''@when'' rule {#when-rule}
==========================================================

The <dfn>@when</dfn> at-rule is a <a>conditional group rule</a>
that generalizes the individual <a>conditional group rules</a>
such as ''@media'' and ''@supports''.
It is defined as:

<pre class=prod>
@when <<boolean-condition>> {
	<<stylesheet>>
}
</pre>

Where <<boolean-condition>> is a boolean algebra a la [[mediaqueries-4#mq-syntax]],
but with ''media()'' and ''supports()'' functions as leaves.

Issue: Define "boolean algebra, with X as leaves" in a generic way in Conditional,
so all the conditional rules can reference it directly,
rather than having to redefine boolean algebra on their own.

The ''media()'' and ''supports()'' functions are defined as:

<pre class=prod>
<dfn>media()</dfn> = media( [ <<mf-plain>> | <<mf-boolean>> | <<mf-range>> ] )
<dfn>supports()</dfn> = supports( <<declaration>> )
</pre>

A ''media()'' or ''supports()'' function is associated the boolean result
that its contained condition is associated with.

Chained Conditionals: the ''@else'' rule {#else-rule}
=====================================================

Usually, <a>conditional group rules</a> are independent;
each one has a separate condition,
evaluated without direct reference to any other rule,
and decides whether or not to apply their contained rules
based solely on their condition.

This is fine for simple conditions,
but makes it difficult to write a collection of conditionals that are meant to be mutually exclusive;
authors have to very carefully craft their conditions to not activate when the other rules are meant to,
and make sure the collection of conditionals don't accidentally <em>all</em> exclude some situation.

The <dfn>@else</dfn> rule is a <a>conditional group rule</a>
used to form <a>conditional rule chains</a>,
which allow multiple conditional rules to be provided
and guarantee that at most one of them will evaluate their condition as true.
It is defined as:

<pre class=prod>
@else <<boolean-condition>>? {
	<<stylesheet>>
}
</pre>

''@else'' is interpreted identically to ''@when''.
If its <<boolean-condition>> is omitted,
it's treated as having a condition that's always true.

A <dfn export>conditional rule chain</dfn> is a series of consecutive <a>conditional group rules</a>,
starting with a <a>conditional group rule</a> other than ''@else'',
followed by zero or more ''@else'' rules.
There cannot be anything between the successive <a>conditional group rules</a>
other than whitespace and/or comments;
any other token "breaks" the chain.

Issue: Should we require that only the last ''@else'' in a chain can have an omitted condition?
It's not uncommon for me, when debugging code,
to short-circuit an if-else chain by setting one of them to "true";
I presume that would be similarly useful in CSS?
It's still pretty easy to see you've done something wrong if you omit the condition accidentally.

Within a <a>conditional rule chain</a>,
the conditions of each <a>conditional group rule</a> are evaluated in order.
If one of them is true,
the conditions of all <em>following</em> <a>conditional group rules</a> in the chain must evaluate to false,
regardless of what they contain.

An ''@else'' rule that is not part of a <a>conditional rule chain</a> is invalid and must be ignored.

<div class=example>
	For example, here's a (somewhat silly) conditional chain:

	<pre class="lang-css">
		@when media(width >= 400px) and media(pointer: fine) and supports(display: flex) {
			/* A */
		} @else supports(caret-color: pink) and supports(background: double-rainbow()) {
			/* B */
		} @else {
			/* C */
		}
	</pre>

	Exactly one of the preceding rules will be chosen,
	even tho the second rule
	doesn't exclude large widths, fine points, or flexbox support,
	and the last rule
	doesn't specify anything at all.

	To achieve the same result without <a>conditional rule chains</a>,
	you'd need to write:

	<pre class="lang-css">
		@media (width >= 400px) and (pointer: fine) {
			@supports (display: flex) {
				/* A */
			}
			@supports not (display: flex) {
				@supports (caret-color: pink) and (background: double-rainbow()) {
					/* B */
				}
				@supports not ((caret-color: pink) and (background: double-rainbow())) {
					/* C */
				}
			}
		}
		@media not ((width >= 400px) and (pointer: fine)) {
			@supports (caret-color: pink) and (background: double-rainbow()) {
				/* B */
			}
			@supports not ((caret-color: pink) and (background: double-rainbow())) {
				/* C */
			}
		}
	</pre>

	This is simultaneously impossible to read,
	requires significant duplication of both conditions and contents,
	and is <em>very</em> difficult to write correctly
	(I wrote it wrong <em>twice</em> while producing this example).
	If the conditions got any more complicated
	(which is not unusual in real-world content),
	the example would get <em>significantly</em> worse.
</div>
