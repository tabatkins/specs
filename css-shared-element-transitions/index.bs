<pre class='metadata'>
Title: CSS Shared Element Transitions Module Level 1
Shortname: css-shared-element-transitions
Level: 1
Status: ED
Group: csswg
TR: https://www.w3.org/TR/css-shared-element-transitions/
ED: https://drafts.csswg.org/css-shared-element-transitions/
Work Status: exploring
Editor: Tab Atkins-Bittner, Google, http://xanthir.com/contact/, w3cid 42199
Abstract: This module defines the Single-Page Document-Transition API, along with associated properties and pseudo-elements.
Markup Shorthands: markdown on
</pre>

<pre class=link-defaults>
spec:webidl; type:dfn; text:resolve
spec:css-position-3; type:property
    text: inset-block-start
    text: inset-inline-start
spec:css-shapes-3; type:function; text:rect()
</pre>

<style>
/* Put nice boxes around each algorithm. */
[data-algorithm]:not(.heading) {
    padding: .5em;
    border: thin solid #ddd; border-radius: .5em;
    margin: .5em calc(-0.5em - 1px);
}
[data-algorithm]:not(.heading) > :first-child {
    margin-top: 0;
}
[data-algorithm]:not(.heading) > :last-child {
    margin-bottom: 0;
}
[data-algorithm] [data-algorithm] {
      margin: 1em 0;
}
</style>

Introduction {#intro}
=====================

    This spec describes the CSS and JS mechanics
    of the single-page Page Transition API.


Page Transitions {#page-transitions}
================

Tagging Elements For Transition: the 'page-transition-tag' property {#page-transition-tag-prop}
-------------------------------------------------------------------

<pre class=propdef>
Name: page-transition-tag
Value: none | <<custom-ident>>
Initial: none
Inherited: no
Percentages: n/a
Computed Value: as specified
Animation type: discrete
</pre>

The 'page-transition-tag' property "tags" an element
as participating in a page transition.

<dl dfn-type=value dfn-for=page-transition-tag>
    : <dfn>none</dfn>
    :: The element will not participate in a page transition.

    : <dfn><<custom-ident>></dfn>
    :: The element can participate in a page transition,
        as either an outgoing or incoming element,
        with a <dfn dfn for>page transition tag</dfn>
        equal to the <<custom-ident>>'s value.

        The value <css>none</css>
        is invalid as a <<custom-ident>>.
</dl>

The root element participates in a page transition by default using
the following style in the [=user-agent origin=].

<pre><code highlight=css>
    html {
      page-transition-tag: root;
    }
 </code></pre>

Pseudo-Elements {#pseudo}
===============

While the UA is [=animating a page transition=],
it creates the following <dfn export>page-transition pseudo-elements</dfn>,
to represent the various items being animated.

The ''::page-transition'' pseudo-element acts as a grouping element for other
[=page-transition pseudo-elements=] and has the document's root element as its
[=originating element=].

<p class="note">For example, '':root::page-transition'' selector matches this
pseudo-element, but ''div::page-transition'' does not.
</p>

Other [=page-transition pseudo-elements=] take a <<pt-tag-selector>> argument
to specify which elements tagged with ''page-transition-tag'' are affected.

There can be multiple pseudo-elements of the same type,
one for each ''page-transition-tag'' participating in a transition.

The <<pt-tag-selector>> is defined as follows:

<pre class=prod>
    <dfn>&lt;pt-tag-selector></dfn> = '*' | <<custom-ident>>
</pre>

A value of ''*'' makes the corresponding selector apply to all pseudo elements
of the specified type. The specificity of a page-transition selector with a
''*'' argument is zero.

The <<custom-ident>> value makes the corresponding selector apply to exactly
one pseudo element of the specified type, namely the pseudo-element that is
created as a result of the ''page-transition-tag'' property on an element with
the same <<custom-ident>> value. The specificity of a page-transition selector
with a <<custom-ident>> argument is the same as for other pseudo-elements, and
is equivalent to a [=type selector=].

The following describes all of the [=page-transition pseudo-elements=] and their function:

: <dfn>::page-transition</dfn>
:: This pseudo-element is the grouping container of all the other
    [=page-transition pseudo-elements=].  Its [=originating element=] is the
    document's root element.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition {
      position: fixed;
      inset: 0;
    }
    </code></pre>

    Note: The aim of the style is to size the pseudo-element to cover the
    complete viewport.

    Issue: Is this needed? For multiple independent transitions this could be
    useful to separate which transition is represented in the particular
    :page-transition subtree.

: <dfn>::page-transition-container( <<pt-tag-selector>> )</dfn>
::  One of these pseudo-elements exists
    for each ''page-transition-tag'' in a page transition,
    and holds the rest of the pseudo-elements corresponding
    to this ''page-transition-tag''.

    Its [=originating element=] is the ''::page-transition''
    pseudo-element.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition-container(*) {
      position: absolute;
      top: 0;
      left: 0;
    }
    </code></pre>

    Note: The aim of the style is to position the element relative to its
    ::page-transition parent.

    In addition to above, styles in the [=user-agent origin=] animate this
    pseudo-element's 'width' and 'height' from the size of the outgoing element's
    [=border box=] to that of the incoming element's [=border box=]. Also the
    element's 'transform' is animated from the outgoing element's screen space
    transform to the incoming element's screen space transform. This style is
    generated dynamically since the values of animated properties are determined
    at the time that the transition begins.

    Issue: The selector for this and subsequently defined pseudo-elements is
    likely to change to indicate position in the pseudo-tree hierarchy.

: <dfn>::page-transition-image-wrapper( <<pt-tag-selector>> )</dfn>
::  One of these pseudo-elements exists
    for each page-transition-tag being in a page transition,
    and holds the images of the outgoing and incoming elements.

    Its [=originating element=] is the ''::page-transition-container()''
    pseudo-element with the same tag.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition-image-wrapper(*) {
      position: absolute;
      inset: 0;
    }
    </code></pre>

    In addition to above, styles in the [=user-agent origin=] add ''isolation:
    isolate'' to this pseudo-element if it has both
    ''::page-transition-incoming-image'' and ''::page-transition-outgoing-image'' as
    descendants.

    Note: The aim of the style is to position the element to occupy the same space
    as its ::page-transition-container element and provide isolation for
    blending.

    Issue: Isolation is only necessary to get the right cross-fade between
    incoming and outgoing image pixels. Would it be simpler to always add it
    and try to optimize in the implementation?

: <dfn>::page-transition-outgoing-image( <<pt-tag-selector>> )</dfn>
::  One of these pseudo-elements exists
    for each element in the outgoing DOM being animated by the page transition,
    and is a [=replaced element=] displaying the outgoing element's snapshot image.
    It has [=natural dimensions=] equal to the snapshot's size.

    Its [=originating element=] is the ''::page-transition-image-wrapper()''
    pseudo-element with the same tag.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition-outgoing-image(*) {
      position: absolute;
      inset-block-start: 0;
      inline-size: 100%;
      block-size: auto;
    }
    </code></pre>

    Note: The aim of the style is to match the element's inline size while
    retaining the aspect ratio. It is also placed at the block start.

    In addition to above, styles in the [=user-agent origin=] add
    ''mix-blend-mode:plus-lighter'' to this pseudo element if the ancestor
    ''::page-transition-image-wrapper'' has both
    ''::page-transition-incoming-image'' and ''::page-transition-outgoing-image'' as
    descendants.

    Note: mix-blend-mode value of plus-lighter ensures that the blending of identical
    pixels from the outgoing and incoming images results in the same color value
    as those pixels.

    Additional [=user-agent origin=] styles added to animate these pseudo-elements
    are detailed in [=Animate a page transition=].

: <dfn>::page-transition-incoming-image( <<pt-tag-selector>> )</dfn>
::  Identical to ''::page-transition-outgoing-image()'',
    except it deals with the incoming element instead.

The precise tree structure, and in particular the order of sibling
pseudo-elements, is defined in the [=Create transition pseudo-elements=]
algorithm.

Styles applied to these pseudo-elements are limited to styles in the
[=user-agent origin=] unless the [=SameDocumentTransition/phase=] associated with them is
set to "running".

New Stacking Layer {#new-stacking-layer}
===============

This specification introduces a new stacking layer to the
<a href="https://www.w3.org/TR/CSS2/zindex.html">Elaborate description of Stacking Contexts</a>.

The ''::page-transition'' pseudo-element generates a new stacking context
called <dfn>page-transition layer</dfn> with the following characteristics:

1. Its parent stacking context is the root stacking context.

1. If the ''page-transition'' pseudo-element exists, a new stacking
    context is created for the
    <a href="https://dom.spec.whatwg.org/#concept-tree-root">root</a>
    and <a href="https://fullscreen.spec.whatwg.org/#top-layer">top layer</a>
    elements.
    The ''page-transition layer'' is a sibling of this stacking context.

1. The ''page-transition layer'' paints after the stacking context for the
     <a href="https://dom.spec.whatwg.org/#concept-tree-root">root</a>
    and <a href="https://fullscreen.spec.whatwg.org/#top-layer">top layer</a>
    elements.

Note: The intent of the feature is to be able to capture the contents of the
page, which includes the top layer elements. In order to accomplish that, the
''page-transition layer'' cannot be a part of the captured top layer context,
since that results in a circular dependency. Instead, this stacking context is a
sibling of other page contents.

Issue: Do we need to clarify that the stacking context for the root and top
layer elements has filters and effects coming from the root element's style?

API {#api}
====

Single-page API:

<xmp class=idl>
interface SameDocumentTransition {
    constructor();
    Promise<undefined> prepare(PrepareCallback cb);
    undefined abandon();
    readonly attribute Promise<undefined> finished;
};

callback PrepareCallback = Promise<any> ();
</xmp>

<div class="note">
    The {{SameDocumentTransition}} represents and controls
    a single same-document transition. That is, it controls a transition where the
    starting and ending document are the same, possibly with changes to the
    document's DOM structure.
</div>

{{SameDocumentTransition}} objects have the following:

<dl dfn-for="SameDocumentTransition">
    : <dfn>tagged elements</dfn>
    :: a [=/map=],
        whose keys are [=page transition tags=] and whose values are [=captured elements=].
        Initially a new [=map=].

    : <dfn>phase</dfn>
    :: "`idle`", "`preparing`", "`running`", or "`finished`".
        Initially "`idle`".

    : <dfn>prepare callback</dfn>
    :: a {{PrepareCallback}} or null. Initially null.

    : <dfn>ready promise</dfn>
    :: a {{Promise}}.
        Initially [=a new promise=] in [=this's=] [=relevant Realm=].

    : <dfn>finished promise</dfn>
    :: a {{Promise}}.
        Initially [=a new promise=] in [=this's=] [=relevant Realm=].
</dl>

The {{SameDocumentTransition/finished}} [=getter steps=] are to return [=this's=] [=SameDocumentTransition/finished promise=].

A {{Document}} additionally has:

<dl dfn-for="document">
    : <dfn>pending same document transition outgoing capture</dfn>
    :: a {{SameDocumentTransition}} or null. Initially null.

    : <dfn>running same document transition</dfn>
    :: a {{SameDocumentTransition}} or null. Initially null.
</dl>

<div algorithm="SameDocumentTransition.prepare()">
    The [=method steps=] for
    <dfn method for=SameDocumentTransition>prepare(|cb|)</dfn>
    are as follows:

    1. If [=this's=] [=SameDocumentTransition/phase=] is not "`idle`", then throw an "{{InvalidStateError}}" {{DOMException}}.

    1. Set [=this's=] [=SameDocumentTransition/phase=] to "`preparing`".

    1. Set [=this's=] [=SameDocumentTransition/prepare callback=] to |cb|.

    1. Let |document| be [=this's=] [=relevant global object's=] [=associated document=].

    1. Let |transitionsToAbandon| be a [=/list=] of every {{SameDocumentTransition}}
        within [=this's=] [=relevant Realm=]
        that has a [=SameDocumentTransition/phase=] that is not "`idle`",
        ordered by creation time, ascending.

        Issue: I just picked an ordering here.
        But, is it ever possible to end up with a list of more than one item here?
        If so, we should say so in the prose, then order doesn't matter.

    1. [=list/For each=] |transition| of |transitionsToAbandon|,
        [=abandon the page transition=] |transition| with an "{{AbortError}}" {{DOMException}}.

    1. Assert: |document|'s [=document/pending same document transition outgoing capture=] is null.

    1. Set |document|'s [=document/pending same document transition outgoing capture=] to [=this=].

    1. Return [=this's=] [=SameDocumentTransition/ready promise=].

    Note: This process continues in [=perform an outgoing capture=].
</div>

<div algorithm="SameDocumentTransition.abandon()">
    The [=method steps=] for
    <dfn method for=SameDocumentTransition>abandon()</dfn> are:

    1. If [=this's=] [=SameDocumentTransition/phase=] is not "`finished`",
        then [=abandon the page transition=] [=this=]
        with an "{{AbortError}}" {{DOMException}}.
</div>

<div algorithm="monkey patch rendering">
    Run the following steps before [marking paint timing](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model:mark-paint-timing) in the [=update the rendering=] steps:

    1. For each [=fully active=] {{Document}} in <var ignore>docs</var>,
        [=perform pending transition operations=] for that {{Document}}.

    Note: These steps will be added to the [=update the rendering=] in the HTML spec.
        As such, the prose style is written to match other steps in that algorithm.
</div>

<div algorithm="perform pending transition operations">
    To <dfn>perform pending transition operations</dfn> given a {{Document}} |document|,
        perform the following steps:

    1. If |document|'s [=document/pending same document transition outgoing capture=] is not null, then:

        1. [=Perform an outgoing capture=] with |document|'s [=document/pending same document transition outgoing capture=].

        1. Set |document|'s [=document/pending same document transition outgoing capture=] to null.

    1. If |document|'s [=document/running same document transition=] is not null,
        then [=update transition DOM=] for |document|'s [=document/running same document transition=].
</div>

<div algorithm="perform outgoing capture">
    To <dfn>perform an outgoing capture</dfn> given a {{SameDocumentTransition}} |transition|,
        perform the following steps:

    1. Let |taggedElements| be |transition|'s [=SameDocumentTransition/tagged elements=].

    1. Let |usedTransitionTags| be a new [=/set=] of strings.

    1. Let |preparationFailed| be false.

    1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

    1. [=list/For each=] |element| of every {{Element}} and [=pseudo-element=] connected to |document|,
        in [paint order](https://drafts.csswg.org/css2/#painting-order):

        Issue: The link for "paint order" doesn't seem right.
            Is there a more canonical definition?

        1. Let |transitionTag| be the [=computed value=] of 'page-transition-tag' for |element|.

        1. If |transitionTag| is ''page-transition-tag/none'',
            or |element| is [=element-not-rendered|not rendered=],
            then [=continue=].

        1. If any of the following is true:

            * |usedTransitionTags| [=list/contains=] |transitionTag|.

            * |element| is not |element|'s [=tree/root=] and |element| does not have [=layout containment=].

            * |element| is not |element|'s [=tree/root=] and |element| does prevent [=fragmentation=].

            Then set |preparationFailed| to true and [=break=].

        1. [=set/Append=] |transitionTag| to |usedTransitionTags|.

        1. Let |capture| be a new [=captured element=] struct.

        1. Set |capture|'s [=outgoing image=] to the result of [=capturing the image=] of |element|.

        1. Set |capture|'s [=outgoing styles=] to the following:

            : 'transform'
            :: A CSS transform that would place |element|
                from the document origin to its current quad.
            :: This value is identity for the root element.

            : 'width'
            : 'height'
            :: The width and height of |element|'s border box.
            :: This value is the bounds of the initial containing block for the root element.

            : 'object-view-box'
            :: An 'object-view-box' value that,
                when applied to the outgoing image,
                will cause the view box to coincide with |element|'s [=border box=]
                in the image.

            : 'writing-mode'
            :: The 'writing-mode' of |element|.

            : 'direction'
            :: The 'direction' of |element|.

            Issue: This needs proper types.

        1. Set |taggedElements|[|transitionTag|] to |capture|.

    1. Suppress rendering opportunities for |transition|'s [=relevant global object's=] [=associated document=].

        Note: The aim is to prevent unintended DOM updates from being presented to the
        user after a cached snapshot for the elements has been captured. We wait for
        one rendering opportunity after prepare to present DOM mutations made by the
        author before prepare to be presented to the user. This is also the content
        captured in snapshots.

        Issue: Further clarify this behavior. Lifecycle updates can still be triggered
        via script APIs which query style or layout information but no visual updates
        are presented to the user. Is this the same behavior as render-blocking?

        Issue: How should input be handled when in this state? The last frame presented
        to the user will not reflect the DOM state as it asynchronously switches to
        the new version.

    1. [=Queue a global task=] on the [=DOM manipulation task source=],
        given |transition|'s [=relevant global object=],
        to execute the following steps:

            Note: A task is queued here because the texture read back in [=capturing the image=] may be async,
                although the render steps in the HTML spec act as if it's synchronous.

        1. Let |timedOut| be false.

        1. [=/Invoke=] [=SameDocumentTransition/prepare callback=],
            and let |userP| be the return value.

        If |userP| does not settle within an implementation-defined timeout period:

            1. Set |timedOut| to true.

            1. If |preparationFailed| is true,
                then [=abandon the page transition=] |transition| with an "{{AbortError}}" {{DOMException}},
                and abort these steps.

            1. Otherwise, [=abandon the page transition=] |transition| with a "{{TimeoutError}}" {{DOMException}}.

        [=Upon fulfillment=] of |userP|:

            1. If |timedOut| is true, then abort these steps.

            1. Stop suppressing rendering opportunities for |transition|'s Document.

                Note: Resuming rendering opportunities is delayed until fulfillment of
                |userP| to allow asynchronous loading of the incoming DOM.

            1. If |preparationFailed| is true,
                then [=abandon the page transition=] |transition| with an "{{AbortError}}" {{DOMException}},
                and abort these steps.

            1. Set |usedTransitionTags| to a new [=/set=].

            1. [=list/For each=] |element| of every {{Element}} and [=pseudo-element=] connected to |document|,
                in [paint order](https://drafts.csswg.org/css2/#painting-order):

                Issue: The link for "paint order" doesn't seem right.
                    Is there a more canonical definition?

                1. Let |transitionTag| be the [=computed value=] of 'page-transition-tag' for |element|.

                1. If |transitionTag| is ''page-transition-tag/none'',
                    or |element| is [=element-not-rendered|not rendered=],
                    then [=continue=].

                1. If any of the following is true:

                    * |usedTransitionTags| [=list/contains=] |transitionTag|.

                    * |element| is not |element|'s [=tree/root=]
                        and |element| does not have [=layout containment=].

                    * |element| is not |element|'s [=tree/root=]
                        and |element| does prevent [=fragmentation=].

                    Then [=abandon the page transition=] |transition| with an "{{InvalidStateError}}" {{DOMException}},
                        and abort these steps.

                1. [=set/Append=] |transitionTag| to |usedTransitionTags|.

                1. If |taggedElements|[|transitionTag|] does not [=map/exist=],
                    then set |taggedElements|[|transitionTag|] to a new [=captured element=] struct.

                1. Let |capture| be |taggedElements|[|transitionTag|].

                1. Let |capture|'s [=incoming element=] item be |element|.

            1. Set |transition|'s [=SameDocumentTransition/phase=] "`running`".

            1. [=Create transition pseudo-elements=] for |transition|.

            1. [=Animate a page transition=] |transition|.

                Note: This will require running document lifecycle phases
                    to compute information calculated during style/layout.

            1. [=Resolve=] [=SameDocumentTransition/ready promise=].

            [=Upon rejection=] of |userP|:

                1. If |timedOut| is true, then abort these steps.

                1. Let |reason| be an "{{AbortError}}" {{DOMException}}
                    if |preparationFailed| is true,
                    otherwise the reason |userP| was rejected.

                1. [=Abandon the page transition=] |transition| with |reason|.
</div>

<div class=example>
    If the default animations for the page transition are acceptable,
    then kicking off a transition
    requires nothing more than setting 'page-transition-tag' in the page's CSS,
    and a single line of script to start it:

    <pre highlight=js>
    new SameDocumentTransition()
      .start(()=>coolFramework.changeTheDOMToPageB());
    </pre>

    If more precise management is needed, however,
    transition elements can be managed in script:

    <pre highlight=js>
    async function doTransition() {
      let transition = new SameDocumentTransition();

      // Specify "outgoing" elements. The tag is used to match against
      // "incoming" elements they should transition to, and to refer to
      // the transitioning pseudo-element.
      document.querySelector(".old-message").style.pageTransitionTag = "message";

      // The prepare() call freezes the page's rendering, and triggers
      // an async operation to capture snapshots for the offered elements.
      await transition.prepare(async () => {
        // This callback is invoked by the browser when "outgoing"
        // capture  finishes and the DOM can be switched to the new
        // state. No frames are rendered until this callback returns.

        // Asynchronously load the new page.
        await coolFramework.changeTheDOMToPageB();

        // Tagging elements during the .start() callback marks them as
        // "incoming", to be matched up with the same-tagged "outgoing"
        // elements marked previously and transitioned between.
        document.querySelector(".new-message").style.pageTransitionTag = "message";
      });

      // When the promise returned by prepare() resolves, all pseudo-elements
      // for this transition have been generated. They can now be accessed
      // in script to set up custom animations.
      document.documentElement.animate(
        keyframes,
        {...animationOptions,
         pseudoElement: "::page-transition-container(message)",
        }
      );

      // When the finished promise resolves, that means the transition is
      // finished (either completed successfully or abandoned).
      await transition.finished;
    }
    </pre>
</div>

<hr>

A <dfn>captured element</dfn> is a [=struct=] with the following:

<dl dfn-for="captured element">
    : <dfn>outgoing image</dfn>
    :: an image or null. Initially null.

        Issue: The type of "image" needs to be linked or defined.

    : <dfn>outgoing styles</dfn>
    :: a set of styles or null. Initially null.

        Issue: The type of "a set of styles" needs to be linked or defined.

    : <dfn>incoming element</dfn>
    :: an element or null. Initially null.

        Issue: The type of "element" needs to be linked or defined.
</dl>

<hr>

<div algorithm>
    To <dfn>abandon the page transition</dfn> for {{SameDocumentTransition}} |transition|
    with |error|:

    1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

    1. If |transition|'s [=SameDocumentTransition/phase=] is not "`idle`", then:

        1. Stop suppressing rendering opportunities |document|, if currently suppressed.

            Issue: "suppressing rendering opportunities" needs to be linked/defined.

        1. If there is currently a page transition being animated, end it.

            Issue: There needs to be a definition/link for "currently animating page transition" or similar.

            Issue: There needs to be a definition/link for "end it".

        1. Remove all associated [=page-transition pseudo-elements=] from |document|.

            Issue: There needs to be a definition/link for "remove".

            Issue: There needs to be a definition/link for "associated".

    1. Set |transition|'s [=SameDocumentTransition/phase=] to "`finished`".

    1. If |document|'s [=document/pending same document transition outgoing capture=] is |transition|,
        then set |document|'s [=document/pending same document transition outgoing capture=] to null.

    1. If |document|'s [=document/running same document transition=] is |transition|,
        then set |document|'s [=document/running same document transition=] to null.

    1. [=Reject=] |transition|'s [=SameDocumentTransition/ready promise=] with |error|.

    1. [=Reject=] |transition|'s [=SameDocumentTransition/finished promise=] with |error|.
</div>

<div algorithm>
    To <dfn lt="capture the image|capturing the image">capture the image</dfn> given an {{Element}} |element|, perform the following steps.
    They return an image.

    1. Render the referenced element and its descendants,
        at the same size that they would be in the document,
        over an infinite transparent canvas with the following characteristics:

        * The origin of |element|'s [=ink overflow rectangle=] is anchored to canvas origin.

        * If the referenced element has a transform applied to it (or its ancestors),
            then the transform is ignored.

            Note: This transform is applied to the snapshot using the `transform` property of the associated ''::page-transition-container'' pseudo-element.

        * [=list/For each=] |descendant| of [=shadow-including descendant=] {{Element}} and [=pseudo-element=] of |element|,
            if |descendant| has a [=computed value=] of 'page-transition-tag' that is not ''page-transition-tag/none'',
            then skip painting |descendant|.

            Note: This is necessary since the descendant will generate its own snapshot which will be displayed and animated independently.

    1. Let |interestRectangle| be the result of [=computing the interest rectangle=] for |element|.

        Note: The |interestRectangle| is the subset of |element|'s [=ink overflow rectangle=] that should be captured.
            This is required for cases where an element's ink overflow rectangle needs to be clipped because of hardware constraints.
            For example, if it exceeds the maximum texture size.

    1. Return the portion of the canvas within |interestRectangle| as an image.
        The natural size of the image is equal to the |interestRectangle| bounds.
</div>

<div algorithm>
    To <dfn>update transition DOM</dfn> given a {{SameDocumentTransition}} |transition|:

    1. For each [=page-transition pseudo-elements=] associated with |transition|,
        check whether there is an active animation associated with this pseudo-element.

        Issue: Define what active animation means here.

    1. If no [=page-transition pseudo-elements=] has an active animation:

        1. Set |transition|'s [=SameDocumentTransition/phase=] to "`finished`".

        1. [=Resolve=] |transition|'s[=SameDocumentTransition/finished promise=].

        1. Return.

    1. [=map/For each=] |tag| -> |capturedElement| of |transition|'s [=SameDocumentTransition/tagged elements=]:

        1. If |capturedElement| has an "incoming element", run [=capture the image=]
            on |capturedElement|'s "incoming element" and update the displayed
            image for ''::page-transition-incoming-image'' with the tag |tag|.

            At the [=user-agent origin=],
            set |incoming|'s 'object-view-box' property
            to a value that when applied to |incoming|,
            will cause the view box to coincide with "incoming element"'s [=border box=]
            in the image.

        1. ...

            Issue: Also clarify updating the animation based on new bounds/transform to
            get c0 continuity.
</div>

<div algorithm>
    To <dfn lt="computing the interest rectangle|compute the interest rectangle">compute the interest rectangle</dfn> of an {{Element}} |el|, perform the following steps.
    They return a rectangle.

    1. If |el| is the document's root element,
        then return a rectangle that is the intersection of the viewport,
        including the size of rendered scrollbars (if any),
        with |el|'s ink overflow rectangle.

    1. If |el|'s [=ink overflow area=] does not exceed an implementation-defined maximum size,
        then return a rectangle that is equal to |el|'s [=ink overflow rectangle=].

    1. Otherwise:

        Issue: Define the algorithm used to clip the snapshot when it exceeds max size.
</div>

<div algorithm>
    To <dfn>animate a page transition</dfn> given a {{SameDocumentTransition}} |transition|:

    1. Generate a <<keyframe>> named "page-transition-fade-out" in
        [=user-agent origin=] as follows:

        <pre><code highlight=css>
            @keyframes page-transition-fade-out {
                  to { opacity: 0; }
            }
        </code></pre>

    1. Generate a <<keyframe>> named "page-transition-fade-in" in
        [=user-agent origin=] as follows:

        <pre><code highlight=css>
            @keyframes page-transition-fade-in {
                  from { opacity: 0; }
            }
        </code></pre>

    1. Apply the following styles in [=user-agent origin=]:

        <pre><code highlight=css>
            html::page-transition-outgoing-image(*) {
                animation: page-transition-fade-out 0.25s both;
            }

            html::page-transition-incoming-image(*) {
                animation: page-transition-fade-in 0.25s both;
            }
        </code></pre>

    1. [=map/For each=] |tag| -> |capturedElement| of |transition|'s [=SameDocumentTransition/tagged elements=]:

        1. If neither of |capturedElement|'s [=captured element/outgoing image=] or [=captured element/incoming element=] is null:

            1. Let 'transform' be |capturedElement|'s [=outgoing styles=]'s 'transform' property.

            1. Let 'width' be |capturedElement|'s [=outgoing styles=]'s 'width' property.

            1. Let 'height' be |capturedElement|'s [=outgoing styles=]'s 'height' property.

            1. Generate a <<keyframe>> named "page-transition-container-anim-|tag|" in
                [=user-agent origin=] as follows:

            <pre><code highlight=css>
                @keyframes page-transition-container-anim-|tag| {
                    from {
                        transform: |transform|;
                        width: |width|;
                        height: |height|;
                    }
                }
            </code></pre>

        1. Apply the following styles in [=user-agent origin=]:

            <pre><code highlight=css>
                html::page-transition-container(|tag|) {
                    animation: page-transition-container-anim-|tag| 0.25s both;
                }
            </code></pre>

    1. Let |document| be |transition|'s [=relevant global object's=] [=associated document=].

    1. Assert: |document|'s [=document/running same document transition=] is null.

    1. Set |document|'s [=document/running same document transition=] to |transition|.

    Issue: How are keyframes scoped to user-agent origin? We could decide
        scope based on whether `animation-name` in the computed style
        came from a developer or UA stylesheet.
        But we do want developers to be able to

    Issue: We should retarget the animation if computed properties for
        incoming elements change.
</div>

<div algorithm>
    To <dfn>create transition pseudo-elements</dfn> for a {{SameDocumentTransition}} |transition|:

    1. Let |transitionRoot| be the result of creating a new ''::page-transition'' pseudo-element.

    1. [=map/For each=] |transitionTag| → |capturedElement| of |transition|'s [=SameDocumentTransition/tagged elements=]:

        1. Let |container| be the result of creating a new ''::page-transition-container'' pseudo-element with the tag |transitionTag|.

            Issue: "tag" should be defined/linked.

        1. Append |container| to |transitionRoot|.

            Issue: This should be better defined.
                I'm not sure if pseudo-elements have defined ways to modify their DOM.

        1. Let |width|, |height|, |transform|, |writingMode|, and |direction| be null.

        1. If |capturedElement|'s [=incoming element=] is null, then:

            1. Set |width| to |capturedElement|'s [=outgoing styles=] 'width' property.

            1. Set |height| to |capturedElement|'s [=outgoing styles=] 'height' property.

            1. Set |transform| to |capturedElement|'s [=outgoing styles=] 'transform' property.

            1. Set |writingMode| to |capturedElement|'s [=outgoing styles=] 'writing-mode' property.

            1. Set |direction| to |capturedElement|'s [=outgoing styles=] 'direction' property.

        1. Otherwise:

            1. Set |width| to the current width of |capturedElement|'s [=incoming element=]'s [=border box=].

            1. Set |height| to the current height of |capturedElement|'s [=incoming element=]'s [=border box=].

            1. Set |transform| to a transform that maps the |capturedElement|'s [=incoming element=]'s [=border box=] from document origin to its quad in viewport.

            1. Set |writingMode| to the [=computed value=] of 'writing-mode' on |capturedElement|'s [=incoming element=].

            1. Set |direction| to the [=computed value=] of 'direction' on |capturedElement|'s [=incoming element=].

        1. Let |width| be the current width of |capturedElement|'s [=incoming element=]'s [=border box=],
            if |capturedElement|'s [=incoming element=] is not null;
            otherwise, |capturedElement|'s [=outgoing styles=] 'width' property.

        1. Let |height| be the current height of |capturedElement|'s [=incoming element=]'s [=border box=],
            if |capturedElement|'s [=incoming element=] is not null;
            otherwise, |capturedElement|'s [=outgoing styles=] 'height' property.

        1. Let |transform| be a transform that maps the |capturedElement|'s [=incoming element=]'s [=border box=] from document origin to its quad in viewport,
            if |capturedElement|'s [=incoming element=] is not null;
            otherwise, |capturedElement|'s [=outgoing styles=] 'transform' property.

        1. At the [=user-agent origin=],
            set |container|'s 'width', 'height', 'transform', 'writing-mode', and 'direction' properties
            to |width|, |height|, |transform|, |writingMode|, and |direction|.

        1. Let |imageWrapper| be a new ''::page-transition-image-wrapper'' pseudo-element with the tag |transitionTag|.

        1. Append |imageWrapper| to |container|.

        1. If |capturedElement|'s [=captured element/outgoing image=] is not null, then:

            1. Let |outgoing| be a new ''::page-transition-outgoing-image'' [=replaced element=] pseudo-element,
                with the tag |transitionTag|,
                displaying |capturedElement|'s [=captured element/outgoing image=].

            1. Append |outgoing| to |imageWrapper|.

            1. At the [=user-agent origin=],
                set |outgoing|'s 'object-view-box' property to |capturedElement|'s [=outgoing styles=] 'object-view-box' property.

                Issue: Which of ''xywh()''/''rect()''/''inset()'' should we use?

        1. If |capturedElement|'s [=incoming element=] is not null, then:

            1. Let |incoming| be a new ''::page-transition-incoming-image'' [=replaced element=] pseudo-element, with the tag |transitionTag|, displaying the [=capture the image=] of |capturedElement|'s [=incoming element=].

            1. Append |incoming| to |imageWrapper|.

            1. At the [=user-agent origin=],
                set |incoming|'s 'object-view-box' property to a value that when applied to |incoming|,
                will cause the view box to coincide with [=incoming element=]'s [=border box=] in the image.
</div>
