<pre class='metadata'>
Title: CSS Shared Element Transitions Module Level 1
Shortname: css-shared-element-transitions
Level: 1
Status: ED
Group: csswg
TR: https://www.w3.org/TR/css-shared-element-transitions/
ED: https://drafts.csswg.org/css-shared-element-transitions/
Work Status: exploring
Editor: Tab Atkins-Bittner, Google, http://xanthir.com/contact/, w3cid 42199
Abstract: This module defines the Single-Page Document-Transition API, along with associated properties and pseudo-elements.
</pre>

<pre class=link-defaults>
spec:webidl; type:dfn; text:resolve
spec:css-position-3; type:property
	text: inset-block-start
	text: inset-inline-start
spec:css-shapes-3; type:function; text:rect()
</pre>

<style>
/* Put nice boxes around each algorithm. */
[data-algorithm]:not(.heading) {
	padding: .5em;
	border: thin solid #ddd; border-radius: .5em;
	margin: .5em calc(-0.5em - 1px);
}
[data-algorithm]:not(.heading) > :first-child {
	margin-top: 0;
}
[data-algorithm]:not(.heading) > :last-child {
	margin-bottom: 0;
}
[data-algorithm] [data-algorithm] {
		margin: 1em 0;
}
</style>

Introduction {#intro}
=====================

	This spec describes the CSS and JS mechanics
	of the single-page Page Transition API.


Page Transitions {#page-transitions}
================

Tagging Elements For Transition: the 'page-transition-tag' property {#page-transition-tag-prop}
-------------------------------------------------------------------

<pre class=propdef>
Name: page-transition-tag
Value: none | <<custom-ident>>
Initial: none
Inherited: no
Percentages: n/a
Computed Value: as specified
Animation type: discrete
</pre>

The 'page-transition-tag' property "tags" an element
as participating in a page transition.

<dl dfn-type=value dfn-for=page-transition-tag>
	: <dfn>none</dfn>
	:: The element will not participate in a page transition.

	: <dfn><<custom-ident>></dfn>
	:: The element can participate in a page transition,
		as either an outgoing or incoming element,
		with a <dfn dfn for>page transition tag</dfn>
		equal to the <<custom-ident>>'s value.

		The value <css>none</css>
		is invalid as a <<custom-ident>>.
</dl>


Pseudo-Elements {#pseudo}
===============

While the UA is [=animating a page transition=],
it creates the following <dfn export>page-transition pseudo-elements</dfn>,
to represent the various items being animated.

Every [=page-transition pseudo-element=]
has the document's root element as its [=originating element=].
(So, for example, '':root::page-transition'' matches,
but ''div::page-transition'' will not;
the pseudos also inherit from the root element.)

Several of these selectors
can represent multiple possible pseudo-elements,
one for each element being animated by the [=page transition=].
Each such pseudo-element has a tag,
given by their corresponding element's 'page-transition-tag' property
and so the selectors take a <<pt-tag-selector>> argument
to specify precisely which pseudo-elements are intended.
This is defined as:

<pre class=prod>
	<dfn>&lt;pt-tag-selector></dfn> = '*' | <<custom-ident>>
</pre>

For each of these, a ''*'' selects all such pseudo-elements,
while a <<custom-ident>> selects the one such pseudo-element
corresponding to the animating element
with that identifier as its 'page-transition-tag' value.

The specificity of a [=page-transition pseudo-element=] with a ''*'' tag
is zero.
(The specificity of one with a tag is as normal for pseudo-elements:
equivalent to a [=type selector=].)

: <dfn>::page-transition</dfn>
:: This pseudo-element is the parent of all the other [=page-transition pseudo-elements=].
	Its [=originating element=] is the document's root element.

	Issue: What functionality does this add?
	Just, like, letting you filter/etc the whole subtree,
	or something else?

: <dfn>::page-transition-container( <<pt-tag-selector>> )</dfn>
::	One of these pseudo-elements exists
	for each element being animated by the page transition,
	and holds the rest of the pseudo-elements.
	It's a child of the ''::page-transition'' pseudo-element.

	Styles in the [=user-agent origin=]
	animate this pseudo-element's 'width' and 'height'
	from the size of the outgoing element's [=border box=]
	to that of the incoming element's [=border box=]. Also
        the element's 'transform' is animated from the outgoing
        element's screen space transform to the incoming element's
        screen space transform.

	Issue: I think this is basically a no-op right now
	(totally subsumed in functionality by the image wrapper one),
	but will be useful when we have more complex page transition options in the future,
	right?

: <dfn>::page-transition-image-wrapper( <<pt-tag-selector>> )</dfn>
::	One of these pseudo-elements exists
	for each element being animated by the page transition,
	and holds the images of the outgoing and incoming elements.
	It's a child of the ''::page-transition-container()'' pseudo-element
	with the same tag.

	Styles in the [=user-agent origin=] add ''isolation: isolate'' to this element.
	The styles also ensure that this pseudo-element's 'width' and 'height'
	match its parent ''::page-transition-container()''.

: <dfn>::page-transition-outgoing-image( <<pt-tag-selector>> )</dfn>
:: 	One of these pseudo-elements exists
	for each element being animated by the page transition,
	and is a [=replaced element=]
	displaying the outgoing element's snapshot image.
	It has [=natural dimensions=]
	equal to the snapshot's size.
	It's a child of the ''::page-transition-image-wrapper()'' pseudo-element
	with the same tag.

	Styles in the [=user-agent origin=]
	animate this pseudo-element's 'width'
	to the same size as its ancestor ''::page-transition-container()'',
	and set this pseudo-element's 'object-view-box' property
	with an ''xywh()'' value
	such that the view box matches the outgoing element's border box
	in the snapshot.

        Note: The aim is to scale the image to match container width but retain
        its aspect ratio. Styles on the page-transition-outgoing-image size it
        to ensure this.

	Issue: Which of ''xywh()''/''rect()''/''inset()'' should we use?

: <dfn>::page-transition-incoming-image( <<pt-tag-selector>> )</dfn>
::	Identical to ''::page-transition-outgoing-image()'',
	except it deals with the incoming element instead.


The precise tree structure
(in particular, the order of sibling pseudo-elements)
is defined in the [=animate a page transition=] algorithm.

Issue: Need to fill in some more spec infrastructure about paint layers and filtering;
things in the normal top layer, like dialogs,
should have the root's filters applied to them
(if you sepia the page, dialogs should be sepia too),
but the page transition paint layer should be a sibling to the root
and not have its filters applied.
(The transition pseudos will *interact* with the root's filters,
via capturing images from there,
but we don't want them to then be *double* sepia'd or whatever.)

<div class=issue>
	More properly integrate this UA stylesheet:

	<xmp highlight=css>
		::page-transition {
		  position: fixed;
		  inset: 0;
		}

		::page-transition-container(*) {
		  position: absolute;
		  top: 0;
		  left: 0;
		  will-change: transform;

		  /* The transform applied to the container includes any translation necessary
		     for the original element's transform-origin. */
		  transform-origin: top left;
		}

		::page-transition-container(root) {
		  right: 0;
		  bottom: 0;
		}

		::page-transition-image-wrapper(*) {
		  position: absolute;
		  inset: 0;
		  isolation: isolate;
		}

		::page-transition-incoming-image(*),
		::page-transition-outgoing-image(*) {
		  position: absolute;
		  inset-block-start: 0;
		  inline-size: 100%;
		  block-size: auto;
		  mix-blend-mode: plus-lighter;
		  will-change: opacity;
		}
	</xmp>
</div>


API {#api}
====

Single-page API:

<xmp class=idl>
interface SameDocumentTransition {
	constructor();
	Promise<any> start(AsyncFunction cb);
	undefined abandon();
};

callback AsyncFunction = Promise<any> ();
</xmp>

The {{SameDocumentTransition}} represents and controls
a single same-document transition;
that is, a [=page transition=] where the starting and ending document are the same,
but the document's DOM has changed between the two states.

{{SameDocumentTransition}} objects have a <dfn attribute for=SameDocumentTransition>\[[TaggedElements]]</dfn>
private slot,
which is a [=/map=],
initially empty,
whose keys are [=page transition tags=]
and whose values are <dfn>CapturedElement</dfn>s,
a [=/struct=]
with items named "outgoing image" (an image),
"outgoing data" (a set of styles),
and "incoming element" (an element),
all initially empty.

They also have a <dfn attribute for=SameDocumentTransition>\[[Phase]]</dfn> internal slot,
which is a [=/string=] chosen from
"idle",
"outgoing-capture",
"incoming-prep",
and "running";
it is initially "idle".

They also have a <dfn attribute for=SameDocumentTransition>\[[TransitionPromise]]</dfn> internal slot,
which is a {{Promise}}
created when a page transition is started,
and resolved when it's ended (successfully or unsuccessfully).

<div algorithm="SameDocumentTransition.start()">
	The [=method steps=] for
	<dfn method for=SameDocumentTransition>start(|cb|)</dfn>
	are:

	1. If any {{SameDocumentTransition}} object in the document
		([=this=] or any other)
		has a {{[[Phase]]}} internal slot set a non-"idle" value,
		[=throw=] an {{InvalidStateException}}.

	1. If multiple elements on the page have the same [=page transition tag=],
		[=throw=] an {{InvalidStateException}}.

	1. Set [=this's=] {{[[Phase]]}} internal slot to "outgoing-capture".

	1. Let |realm| be [=this's=] [=relevant Realm=].

	1. Let |p| be [=a new promise=] in |realm|.
		Set [=this's=] {{[[TransitionPromise]]}} internal slot to |p|.

	1. Let |taggedElements| be [=this's=] {{[[TaggedElements]]}} internal slot.

	1. [=Freeze the page's rendering=].

	1. Execute the following steps [=in parallel=]:

		1. [=map/For each=] element |el| with a non-''page-transition-tag/none'' 'page-transition-tag' value, in paint order:

			1. Let |tag| be |el|&apos;s 'page-transition-tag' value.
			1. Let |capture| be a new [=CapturedElement=] struct.
			1. Set |capture|&apos;s "outgoing image"
				to the result of [=capturing the image=] of |el|.
			1. Set |capture|&apos;s "outgoing styles" to the following:

				: 'transform'
				:: A CSS transform that would place |el|
					from the document origin to its current quad.

				: 'width'
				: 'height'
				:: The width and height of |el|'s border box.

				: 'object-view-box'
				:: An 'object-view-box' value that,
					when applied to the outgoing image,
					will cause the view box to coincide with |el|'s [=border box=]
					in the image.

				: 'writing-mode'
				:: The 'writing-mode' of |el|.

				: 'direction'
				:: The 'direction' of |el|.

			1. Set |taggedElements|[|tag|] to |capture|.

			Note: As this step happens asynchronously,
			it can race with author DOM modifications.

		1. [=Queue a global task=] on the [=DOM manipulation task source=],
			given |realm|&apos;s [=Realm/global object=],
			to execute the following steps:

			1. Set [=this's=] {{[[Phase]]}} internal slot to "incoming-prep".

			1. [=/Invoke=] |cb|, and let |userP| be the return value.

				[=Upon fulfillment=] of |userP|:

				1. If multiple elements on the page have the same [=page transition tag=],
					[=abandon the page transition=] managed by [=this=]
					with an {{InvalidStateException}}.

				1. [=map/For each=] element |el| with a non-''page-transition-tag/none'' 'page-transition-tag' value,
					in paint order:

					1. Let |tag| be |el|&apos;s 'page-transition-tag' value.

					1. If |taggedElements|[|tag|] does not exist,
						set it to a new [=CapturedElement=] struct.

					1. Let |capture| be |taggedElements|[|tag|].

					1. Let |capture|&apos;s "incoming element" item be |el|.

				1. [=In parallel=]:
					1. [=Animate a page transition=] managed by [=this=].

					1. [=Resolve=] |p| with |userP|.

				[=Upon rejection=] of |userP|:

				1. Let |reason| be the reason |userP| was rejected.

				1. [=Abandon the page transition=] managed by [=this=]
					with |reason|.

				If the time from when |cb| is invoked
				to when |userP| is fulfilled
				is longer than an implementation-defined timeout period,
				[=abandon the page transition=] managed by [=this=]
				with a {{TimeoutError}}.

	1. Return |p|.
</div>

<div algorithm="SameDocumentTransition.abandon()">
	The [=method steps=] for
	<dfn method for=SameDocumentTransition>abandon()</dfn> are:

	1. If [=this's=] {{[[Phase]]}} internal slot is not "idle",
		[=abandon the page transition=] managed by [=this=]
		with an {{AbortError}}.

	2. Otherwise, do nothing.
</div>

<div class=example>
	If the default animations for the page transition are acceptable,
	then kicking off a transition
	requires nothing more than setting 'page-transition-tag' in the page's CSS,
	and a single line of script to start it:

	<pre highlight=js>
	new SameDocumentTransition()
		.start(()=>coolFramework.changeTheDOMToPageB());
	</pre>

	If more precise management is needed, however,
	transition elements can be managed in script:

	<pre highlight=js>
	async function doTransition() {
		let transition = new SameDocumentTransition();

		// Specify "outgoing" elements. The tag is used to match against
		// "incoming" elements they should transition to, and to refer to
		// the transitioning pseudo-element.
		document.querySelector(".old-message").style.pageTransitionTag = "message";

		// The start() call freezes the page's rendering, and triggers
		// an async operation to capture snapshots for the offered elements.
		await transition.start(async () => {
			// This callback is invoked by the browser when "outgoing"
			// capture  finishes and the DOM can be switched to the new
			// state. No frames are rendered until this callback returns.

			// Asynchronously load the new page.
			await coolFramework.changeTheDOMToPageB();

			// Tagging elements during the .start() callback marks them as
			// "incoming", to be matched up with the same-tagged "outgoing"
			// elements marked previously and transitioned between.
			document.querySelector(".new-message").style.pageTransitionTag = "message";

			// Set up custom animations using WA-API on the next frame.
			requestAnimationFrame(() => {
				document.documentElement.animate(keyframes, {
				...animationOptions,
				pseudoElement: "::page-transition-container(message)",
				});
			});

			// When this callback returns, the browser will identify the
			// incoming elements, and begin animating the page transition
			// on the next frame.
		});

		// When .start()'s promise resolves, that means the transition is
		// finished (either completed successfully or abandoned).
		// It will fulfill with the return value of the callback,
		// and reject with the error thrown by the callback,
		// or possibly a TimeoutError or AbortError, if the UA abandoned it.
	}
	</pre>
</div>

<hr>

<div algorithm>
	To <dfn>freeze the page's rendering</dfn>,
	...

	Issue: Do a full lifecycle update first--
	run rAF,
	flush styles,
	and fully layout the page. The result of this lifecycle
        update are presented to the user.
	This requires integration into the HTML lifetime cycle;
	I haven't had to write text for that before,
	but it should be similar or identical
	to the fixes I need to make to integrate IntersectionObserver properly.
</div>

<div algorithm>
	To <dfn>unfreeze the page's rendering</dfn>,
	...
</div>

<div algorithm>
	To <dfn>abandon the page transition</dfn>
	managed by a {{SameDocumentTransition}} |manager|
	with an error |error|:

	1. If the page's rendering is currently frozen,
		[=unfreeze the page's rendering=].

	1. If there is currently a page transition being animated,
		end it.
		Remove all associated [=page-transition pseudo-elements from the document.

	1. Set |manager|&apos;s {{[[Phase]]}} internal slot to "idle".

	1. [=Reject=] |manager|&apos;s {{[[TransitionPromise]]}}
		with |error|.
</div>

<div algorithm>
	To <dfn>capture the image</dfn>
	of an {{Element}} |el|,
	...

	Issue: Figure out |el|'s bounds
	(both border box and ink overflow rectangle,
	so we can set up the view box properly),
	and render it into a canvas.
	If it has children that are also tagged for capture,
	skip their painting.
	For this purpose, the element is treated as ''isolation: isolate'',
	''contain: paint'',
	and ''break-inside: avoid''.
</div>

<div algorithm>
	To <dfn>capture the live image</dfn>
	of an {{Element}} |el|,
	...

	Issue: Identical to [=capture the image=],
	except rather than a static image snapshot,
	it's a live rendering of the element,
	reflecting the current size and appearance
	in sync with the real element.
</div>

<div algorithm>
	To <dfn>animate a page transition</dfn>
	given a {{SameDocumentTransition}} |manager|:

	1. Let |transition root| be a new ''::page-transition'' pseudo-element,
		and place it in the [=page-transition paint layer=].

	1. Let |root image| be the result of
		[=capturing the live image=] of the document's root element.

		Create an anonymous replaced element
		the same size as |root image|,
		displaying |root image|,
		as a child of |transition root|.
		Treat is as an absolutely positioned element
		with ''inset-block-start: 0''
		and ''inset-inline-start: 0''.

	1. [=map/For each=] |tag| -> |el| of |manager|&apos;s {{[[TaggedElements]]}}:

		1. [=Create transition pseudo-elements=] from |tag| and |el|,
			nested into |transition root|.

	1. Issue: Wait one frame, per the example?

	1. Start an animation with keyframes of:

		<div class=issue>
			Fill in proper Web Animations text for:

			* animates 'opacity' on ''::page-transition-outgoing-image''
				from 1 to 0
			* animates 'opacity' on ''::page-transition-incoming-image''
				from 0 to 1
			* animates 'width', 'height', and 'transform' on ''::page-transition-container''
				from their starting values
				to the live values on "incoming element"
				(if it exists)

			All over a user-agent-defined duration,
			presumably with a UA-defined curve.
		</div>

		Issue: We want authors to be able to override,
		but there's no such thing as animation effects "at the UA level",
		such that a user-level animation would automatically win.
		Should we just test for the presence of a WebAnim targeting the pseudos in question,
		and only create our own if they don't exist?
		Or something else?
</div>

<div algorithm>
	To <dfn>create transition pseudo-elements</dfn> from a tag |tag|
	and a [=CapturedElement=] |el|,
	nesting into the ''::page-transition'' pseudo-element |pt|:

	1. Let |container| be a new ''::page-transition-container'' pseudo-element
		with the tag |tag|,
		inserted as a child of |pt|.

	1. Let |width| be |el|&apos;s "outgoing data" 'width' property, if it exists;
		otherwise, the current width of |el|&apos;s "incoming element"'s [=border box=].

		Let |height| be |el|&apos;s "outgoing data" 'height' property, if it exists;
		otherwise, the current height of |el|&apos;s "incoming element"'s [=border box=].

		Let |transform| be |el|&apos;s "outgoing data" 'transform' property, if it exists;
		otherwise, the transform that would translate |el|&apos;s "incoming element"
		from the document origin
		to its current position.

		Let |writing-mode| and |direction| be the current value of those properties
		on |el|&apos;s "incoming element",
		if it exists;
		otherwise, |el|&apos;s "outgoing data" corresponding property.

		At the [=user-agent origin=],
		set |container|&apos;s 'width', 'height', 'transform', 'writing-mode', and 'direction' properties
		to |width|, |height|, |transform|, |writing-mode|, and |direction|.

	1. Let |image wrapper| be a new ''::page-transition-image-wrapper'' pseudo-element
		with the tag |tag|,
		inserted as a child of |container|.

		At the [=user-agent origin=],
		set |image wrapper|&apos;s 'width', 'height', 'writing-mode', and 'direction' properties
		to |width|, |height|, |writing-mode|, and |direction|.

	1. If |el| has an "outgoing image",
		then let |outgoing| be a new ''::page-transition-outgoing-image'' pseudo-element
		with the tag |tag|,
		inserted as a child of |image wrapper|.
		This pseudo-element is a [=replaced element=],
		displaying |el|&apos;s "outgoing image".

		At the [=user-agent origin=],
		set |outgoing|&apos;s 'object-view-box' property
		to |el|&apos;s "outgoing data" 'object-view-box' property.

	1. If |el| has an "incoming element",
		then let |incoming| be a new ''::page-transition-incoming-image''
		pseudo-element
		with the tag |tag|,
		inserted as a child of |image wrapper|
		(after |outgoing|, if it exists).
		This pseudo-element is a [=replaced element=],
		displaying the [=capture the live image|live image=]
		of |el|&apos;s "incoming element".

		At the [=user-agent origin=],
		set |incoming|&apos;s 'object-view-box' property
		to a value that when applied to |incoming|,
		will cause the view box to coincide with "incoming element"'s [=border box=]
		in the image.
</div>
